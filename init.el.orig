;; Packaging
(require 'cl)
(require 'package)
(add-to-list 'package-archives
	     '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives
	     '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)
(defvar prelude-packages
<<<<<<< HEAD
  '(haskell-mode python quack paredit workgroups crosshairs hl-line+ col-highlight sunrise-commander yasnippet))
=======
  '(haskell-mode python quack paredit workgroups crosshairs hl-line+ col-highlight sunrise-commander slime))
>>>>>>> 1be6cfd864a6db1450d9d994023ba44942478dcc
(defun prelude-packages-installed-p ()
  (loop for p in prelude-packages
	when (not (package-installed-p p)) do (return nil)
	finally (return t)))
(unless (prelude-packages-installed-p)
  ;; check for new packages (package versions)
  (message "%s" "Emacs Prelude is now refreshing its package database...")
  (package-refresh-contents)
  (message "%s" " done/")
  ;; install the missing packages
  (dolist (p prelude-packages)
    (when (not (package-installed-p p))
      (package-install p))))

(add-to-list 'load-path "~/.emacs.d/lisp/")

;; Requires
(require 'ahk-mode)
(require 'git)
<<<<<<< HEAD
(require 'yasnippet)
=======
(require 'crosshairs)
>>>>>>> 1be6cfd864a6db1450d9d994023ba44942478dcc

;; General emacs settings

(setq inhibit-startup-message t)
(setq make-backup-files nil)
(setq large-file-warning-threshold 200000000) ; Warn for files > 200 MB

(iswitchb-mode 1) ;; improved buffer switching
(menu-bar-mode 0)
(desktop-save-mode 1) ;; persistent sessions

(setq scroll-step            1
      scroll-conservatively  10000)

(add-hook 'c-mode-common-hook
	  (lambda () (subword-mode 1)))

;; Text mode

(setq text-mode-hook
      '(lambda ()
	 (flyspell-mode 1)))

;; Haskell mode
(load "~/.emacs.d/plugins/haskell-mode/haskell-site-file")
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)

;; SICP Support (Racket)
(load-file "~/.emacs.d/lisp/geiser/elisp/geiser.el")
(require 'quack)
(autoload 'paredit-mode "paredit"
  "Minor mode for pseudo-structurally editing Lisp code." t)
(add-hook 'emacs-lisp-mode-hook       (lambda () (paredit-mode +1)))
(add-hook 'lisp-mode-hook             (lambda () (paredit-mode +1)))
(add-hook 'lisp-interaction-mode-hook (lambda () (paredit-mode +1)))
(add-hook 'scheme-mode-hook           (lambda () (paredit-mode +1)))
(add-hook 'quack-mode-hook            (lambda () (paredit-mode +1)))
(add-hook 'geiser-repl-mode-hook      (lambda () (paredit-mode +1)))
(setq scheme-program-name "racket")

;; SLIME for Common Lisp
(require 'slime-autoloads)
(if (eq system-type 'windows-nt)
    (setq inferior-lisp-program "clisp.exe")
  (setq inferior-lisp-program "sbcl"))
(add-hook 'lisp-mode-hook
	  (lambda () (global-set-key (kbd "C-c c") 'slime-compile-and-load-file)))

;; NOTE! If Slime does not work, giving some cl error, do this:
;; Open up slime.el and change the line at the bottom from
;; lexical-binding: t
;; to
;; lexical-binding: nil


;; Keyboard shortcuts
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "C-h") 'delete-backward-char)
(global-set-key (kbd "M-h") 'backward-kill-word)
(global-set-key (kbd "C-c c") 'compile)
(global-set-key (kbd "C-x h") 'help-command)
(global-set-key (kbd "C-x C-m") 'execute-extended-command)
(global-set-key (kbd "C-c C-m") 'execute-extended-command)
(global-set-key (kbd "C-c o") 'ff-find-other-file)
(global-set-key (kbd "C-c g") 'gdb-many-windows)
(global-set-key (kbd "C-c r") 'revert-buffer)
<<<<<<< HEAD
(global-set-key (kbd "C-c l") 'hl-line-mode)
=======
(global-set-key (kbd "C-x C-u") 'undo)
>>>>>>> 1be6cfd864a6db1450d9d994023ba44942478dcc

(global-set-key (kbd "C-c b")  'windmove-left)
(global-set-key (kbd "C-c f") 'windmove-right)
(global-set-key (kbd "C-c p")    'windmove-up)
(global-set-key (kbd "C-c n")  'windmove-down)
(setq windmove-wrap-around t)

(fset 'both-prev-page
   "\C-[v\C-xo\C-[v")

(global-set-key (kbd "C-M-p") 'both-prev-page)
(global-set-key (kbd "C-M-v") 'both-next-page)


;; Workgroups
(require 'workgroups)
(setq wg-prefix-key (kbd "C-z"))
(workgroups-mode 1)
(wg-load "~/.emacs.d/workgroups")
