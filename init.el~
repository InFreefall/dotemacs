;(setq asm-comment-char ?\#) ;; This is MIPS assembly, uses # for comments
(setq auto-mode-alist (cons '("\\.asmnes$" . asm-mode) auto-mode-alist))

;(setq load-path (cons "/opt/local/share/gtags/" load-path))
;(autoload 'gtags-mode "gtags" "" t)
;(setq cc-mode-hook
;      '(lambda ()
;	 (gtags-mode 1)))
(setq inhibit-startup-message t)

(setq text-mode-hook
      '(lambda ()
	 (flyspell-mode 1)))

;; Haskell mode
(load "~/.emacs.d/plugins/haskell-mode/haskell-site-file")
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)

;; Keyboard shortcuts
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "C-h") 'delete-backward-char)
(global-set-key (kbd "M-h") 'backward-kill-word)
(global-set-key (kbd "C-c c") 'compile)
(global-set-key (kbd "C-x h") 'help-command)
(global-set-key (kbd "C-x C-m") 'execute-extended-command)
(global-set-key (kbd "C-c C-m") 'execute-extended-command)

(add-to-list 'load-path "~/.emacs.d/lisp/")
;(require 'anythingMatchPlugin)
(menu-bar-mode 0)

;; Persistent Scratch Buffer
(defvar persistent-scratch-filename
  "~/.emacs-persistent-scratch"
  "Location of *scratch* file contents for persistent-scratch.")
(defvar persistent-scratch-backup-directory
  "~/.emacs-persistent-scratch-backups/"
  "Location of backups of the *scratch* buffer contents for persistent-scratch.")
(defun make-persistent-scratch-backup-name ()
  "Create a filename to backup the current scratch file by
   concatenating PERSISTENT-SCRATCH-BACKUP-DIRECTORY with the
   current date and time."
  (concat
   persistent-scratch-backup-directory
   (replace-regexp-in-string
    (regexp-quote " ") "-" (current-time-string))))
(defun save-persistent-scratch ()
  "Write the contents of *scratch* to the file name
   PERSISTENT-SCRATCH-FILENAME, making a backup copy in
   PERSISTENT-SCRATCH-BACKUP-DIRECTORY."
  (with-current-buffer (get-buffer "*scratch*")
    (if (file-exists-p persistent-scratch-filename)
	(copy-file persistent-scratch-filename
		   (make-persistent-scratch-backup-name)))
    (write-region (point-min) (point-max)
		  persistent-scratch-filename)))
(defun load-persistent-scratch ()
  "Load the contents of PERSISTENT-SCRATCH-FILENAME into the
   scratch buffer, clearing its contents first."
  (if (file-exists-p persistent-scratch-filename)
      (with-current-buffer (get-buffer "*scratch*")
	(delete-region (point-min) (point-max))
	(shell-command (format "cat %s" persistent-scratch-filename) (current-buffer)))))
(load-persistent-scratch)
(push #'save-persistent-scratch kill-emacs-hook)

;; Persistent sessions 
(desktop-save-mode 1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; XCode integration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; First of all, associate file extensions
(setq auto-mode-alist
      (cons '("\\.m$" . objc-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.mm$" . objc-mode) auto-mode-alist))